// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	model "shared/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamOperation_AddWithClientStream_FullMethodName = "/StreamOperation/AddWithClientStream"
	StreamOperation_ReadOne_FullMethodName             = "/StreamOperation/ReadOne"
	StreamOperation_AcknowledgeOne_FullMethodName      = "/StreamOperation/AcknowledgeOne"
)

// StreamOperationClient is the client API for StreamOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Redis Stream GRPC Operations
type StreamOperationClient interface {
	// Add to Redis Stream with gRPC Client side streaming
	AddWithClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[model.StreamRecord, emptypb.Empty], error)
	// Read Stream Log
	ReadOne(ctx context.Context, in *model.StreamRecord, opts ...grpc.CallOption) (*model.StreamRecord, error)
	// Acknowledge Stream Log
	AcknowledgeOne(ctx context.Context, in *model.StreamRecord, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type streamOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamOperationClient(cc grpc.ClientConnInterface) StreamOperationClient {
	return &streamOperationClient{cc}
}

func (c *streamOperationClient) AddWithClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[model.StreamRecord, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamOperation_ServiceDesc.Streams[0], StreamOperation_AddWithClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[model.StreamRecord, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamOperation_AddWithClientStreamClient = grpc.ClientStreamingClient[model.StreamRecord, emptypb.Empty]

func (c *streamOperationClient) ReadOne(ctx context.Context, in *model.StreamRecord, opts ...grpc.CallOption) (*model.StreamRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.StreamRecord)
	err := c.cc.Invoke(ctx, StreamOperation_ReadOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamOperationClient) AcknowledgeOne(ctx context.Context, in *model.StreamRecord, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamOperation_AcknowledgeOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamOperationServer is the server API for StreamOperation service.
// All implementations must embed UnimplementedStreamOperationServer
// for forward compatibility.
//
// Redis Stream GRPC Operations
type StreamOperationServer interface {
	// Add to Redis Stream with gRPC Client side streaming
	AddWithClientStream(grpc.ClientStreamingServer[model.StreamRecord, emptypb.Empty]) error
	// Read Stream Log
	ReadOne(context.Context, *model.StreamRecord) (*model.StreamRecord, error)
	// Acknowledge Stream Log
	AcknowledgeOne(context.Context, *model.StreamRecord) (*emptypb.Empty, error)
	mustEmbedUnimplementedStreamOperationServer()
}

// UnimplementedStreamOperationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamOperationServer struct{}

func (UnimplementedStreamOperationServer) AddWithClientStream(grpc.ClientStreamingServer[model.StreamRecord, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method AddWithClientStream not implemented")
}
func (UnimplementedStreamOperationServer) ReadOne(context.Context, *model.StreamRecord) (*model.StreamRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedStreamOperationServer) AcknowledgeOne(context.Context, *model.StreamRecord) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeOne not implemented")
}
func (UnimplementedStreamOperationServer) mustEmbedUnimplementedStreamOperationServer() {}
func (UnimplementedStreamOperationServer) testEmbeddedByValue()                         {}

// UnsafeStreamOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamOperationServer will
// result in compilation errors.
type UnsafeStreamOperationServer interface {
	mustEmbedUnimplementedStreamOperationServer()
}

func RegisterStreamOperationServer(s grpc.ServiceRegistrar, srv StreamOperationServer) {
	// If the following call pancis, it indicates UnimplementedStreamOperationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamOperation_ServiceDesc, srv)
}

func _StreamOperation_AddWithClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamOperationServer).AddWithClientStream(&grpc.GenericServerStream[model.StreamRecord, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamOperation_AddWithClientStreamServer = grpc.ClientStreamingServer[model.StreamRecord, emptypb.Empty]

func _StreamOperation_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.StreamRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamOperationServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamOperation_ReadOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamOperationServer).ReadOne(ctx, req.(*model.StreamRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamOperation_AcknowledgeOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.StreamRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamOperationServer).AcknowledgeOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamOperation_AcknowledgeOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamOperationServer).AcknowledgeOne(ctx, req.(*model.StreamRecord))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamOperation_ServiceDesc is the grpc.ServiceDesc for StreamOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamOperation",
	HandlerType: (*StreamOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadOne",
			Handler:    _StreamOperation_ReadOne_Handler,
		},
		{
			MethodName: "AcknowledgeOne",
			Handler:    _StreamOperation_AcknowledgeOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddWithClientStream",
			Handler:       _StreamOperation_AddWithClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

const (
	ValueOperation_Set_FullMethodName = "/ValueOperation/Set"
	ValueOperation_Get_FullMethodName = "/ValueOperation/Get"
)

// ValueOperationClient is the client API for ValueOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Redis value GRPC Operations
type ValueOperationClient interface {
	// Set Redis Value
	Set(ctx context.Context, in *model.EntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get Redis Value
	Get(ctx context.Context, in *model.EntryRequest, opts ...grpc.CallOption) (*anypb.Any, error)
}

type valueOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewValueOperationClient(cc grpc.ClientConnInterface) ValueOperationClient {
	return &valueOperationClient{cc}
}

func (c *valueOperationClient) Set(ctx context.Context, in *model.EntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ValueOperation_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valueOperationClient) Get(ctx context.Context, in *model.EntryRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, ValueOperation_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValueOperationServer is the server API for ValueOperation service.
// All implementations must embed UnimplementedValueOperationServer
// for forward compatibility.
//
// Redis value GRPC Operations
type ValueOperationServer interface {
	// Set Redis Value
	Set(context.Context, *model.EntryRequest) (*emptypb.Empty, error)
	// Get Redis Value
	Get(context.Context, *model.EntryRequest) (*anypb.Any, error)
	mustEmbedUnimplementedValueOperationServer()
}

// UnimplementedValueOperationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValueOperationServer struct{}

func (UnimplementedValueOperationServer) Set(context.Context, *model.EntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedValueOperationServer) Get(context.Context, *model.EntryRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedValueOperationServer) mustEmbedUnimplementedValueOperationServer() {}
func (UnimplementedValueOperationServer) testEmbeddedByValue()                        {}

// UnsafeValueOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValueOperationServer will
// result in compilation errors.
type UnsafeValueOperationServer interface {
	mustEmbedUnimplementedValueOperationServer()
}

func RegisterValueOperationServer(s grpc.ServiceRegistrar, srv ValueOperationServer) {
	// If the following call pancis, it indicates UnimplementedValueOperationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValueOperation_ServiceDesc, srv)
}

func _ValueOperation_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueOperationServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValueOperation_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueOperationServer).Set(ctx, req.(*model.EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValueOperation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueOperationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValueOperation_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueOperationServer).Get(ctx, req.(*model.EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValueOperation_ServiceDesc is the grpc.ServiceDesc for ValueOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValueOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ValueOperation",
	HandlerType: (*ValueOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _ValueOperation_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ValueOperation_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	PokeApi_FetchGeneration_FullMethodName     = "/PokeApi/FetchGeneration"
	PokeApi_FetchPokemonSpecies_FullMethodName = "/PokeApi/FetchPokemonSpecies"
)

// PokeApiClient is the client API for PokeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PokeApi service sends http requests to https://pokeapi.co
type PokeApiClient interface {
	// Fetch all Pokemons by Generation name
	FetchGeneration(ctx context.Context, in *model.GenerationRequest, opts ...grpc.CallOption) (*model.GenerationResponse, error)
	// Fetch Pokemon species by name
	FetchPokemonSpecies(ctx context.Context, in *model.PokemonSpeciesRequest, opts ...grpc.CallOption) (*model.PokemonSpecies, error)
}

type pokeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPokeApiClient(cc grpc.ClientConnInterface) PokeApiClient {
	return &pokeApiClient{cc}
}

func (c *pokeApiClient) FetchGeneration(ctx context.Context, in *model.GenerationRequest, opts ...grpc.CallOption) (*model.GenerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.GenerationResponse)
	err := c.cc.Invoke(ctx, PokeApi_FetchGeneration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokeApiClient) FetchPokemonSpecies(ctx context.Context, in *model.PokemonSpeciesRequest, opts ...grpc.CallOption) (*model.PokemonSpecies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.PokemonSpecies)
	err := c.cc.Invoke(ctx, PokeApi_FetchPokemonSpecies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokeApiServer is the server API for PokeApi service.
// All implementations must embed UnimplementedPokeApiServer
// for forward compatibility.
//
// PokeApi service sends http requests to https://pokeapi.co
type PokeApiServer interface {
	// Fetch all Pokemons by Generation name
	FetchGeneration(context.Context, *model.GenerationRequest) (*model.GenerationResponse, error)
	// Fetch Pokemon species by name
	FetchPokemonSpecies(context.Context, *model.PokemonSpeciesRequest) (*model.PokemonSpecies, error)
	mustEmbedUnimplementedPokeApiServer()
}

// UnimplementedPokeApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPokeApiServer struct{}

func (UnimplementedPokeApiServer) FetchGeneration(context.Context, *model.GenerationRequest) (*model.GenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGeneration not implemented")
}
func (UnimplementedPokeApiServer) FetchPokemonSpecies(context.Context, *model.PokemonSpeciesRequest) (*model.PokemonSpecies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPokemonSpecies not implemented")
}
func (UnimplementedPokeApiServer) mustEmbedUnimplementedPokeApiServer() {}
func (UnimplementedPokeApiServer) testEmbeddedByValue()                 {}

// UnsafePokeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokeApiServer will
// result in compilation errors.
type UnsafePokeApiServer interface {
	mustEmbedUnimplementedPokeApiServer()
}

func RegisterPokeApiServer(s grpc.ServiceRegistrar, srv PokeApiServer) {
	// If the following call pancis, it indicates UnimplementedPokeApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PokeApi_ServiceDesc, srv)
}

func _PokeApi_FetchGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeApiServer).FetchGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokeApi_FetchGeneration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeApiServer).FetchGeneration(ctx, req.(*model.GenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokeApi_FetchPokemonSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PokemonSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeApiServer).FetchPokemonSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokeApi_FetchPokemonSpecies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeApiServer).FetchPokemonSpecies(ctx, req.(*model.PokemonSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokeApi_ServiceDesc is the grpc.ServiceDesc for PokeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PokeApi",
	HandlerType: (*PokeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchGeneration",
			Handler:    _PokeApi_FetchGeneration_Handler,
		},
		{
			MethodName: "FetchPokemonSpecies",
			Handler:    _PokeApi_FetchPokemonSpecies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// GridFsClient is the client API for GridFs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Mongodb GridFs GRPC Operations
type GridFsClient interface {
}

type gridFsClient struct {
	cc grpc.ClientConnInterface
}

func NewGridFsClient(cc grpc.ClientConnInterface) GridFsClient {
	return &gridFsClient{cc}
}

// GridFsServer is the server API for GridFs service.
// All implementations must embed UnimplementedGridFsServer
// for forward compatibility.
//
// Mongodb GridFs GRPC Operations
type GridFsServer interface {
	mustEmbedUnimplementedGridFsServer()
}

// UnimplementedGridFsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGridFsServer struct{}

func (UnimplementedGridFsServer) mustEmbedUnimplementedGridFsServer() {}
func (UnimplementedGridFsServer) testEmbeddedByValue()                {}

// UnsafeGridFsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GridFsServer will
// result in compilation errors.
type UnsafeGridFsServer interface {
	mustEmbedUnimplementedGridFsServer()
}

func RegisterGridFsServer(s grpc.ServiceRegistrar, srv GridFsServer) {
	// If the following call pancis, it indicates UnimplementedGridFsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GridFs_ServiceDesc, srv)
}

// GridFs_ServiceDesc is the grpc.ServiceDesc for GridFs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GridFs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GridFs",
	HandlerType: (*GridFsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "service.proto",
}

const (
	MongoDb_SaveOne_FullMethodName = "/MongoDb/SaveOne"
)

// MongoDbClient is the client API for MongoDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MongoDb GRPC Operations
type MongoDbClient interface {
	// Save one PokemonSpecies
	SaveOne(ctx context.Context, in *model.PokemonSpecies, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mongoDbClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDbClient(cc grpc.ClientConnInterface) MongoDbClient {
	return &mongoDbClient{cc}
}

func (c *mongoDbClient) SaveOne(ctx context.Context, in *model.PokemonSpecies, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MongoDb_SaveOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDbServer is the server API for MongoDb service.
// All implementations must embed UnimplementedMongoDbServer
// for forward compatibility.
//
// MongoDb GRPC Operations
type MongoDbServer interface {
	// Save one PokemonSpecies
	SaveOne(context.Context, *model.PokemonSpecies) (*emptypb.Empty, error)
	mustEmbedUnimplementedMongoDbServer()
}

// UnimplementedMongoDbServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMongoDbServer struct{}

func (UnimplementedMongoDbServer) SaveOne(context.Context, *model.PokemonSpecies) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOne not implemented")
}
func (UnimplementedMongoDbServer) mustEmbedUnimplementedMongoDbServer() {}
func (UnimplementedMongoDbServer) testEmbeddedByValue()                 {}

// UnsafeMongoDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoDbServer will
// result in compilation errors.
type UnsafeMongoDbServer interface {
	mustEmbedUnimplementedMongoDbServer()
}

func RegisterMongoDbServer(s grpc.ServiceRegistrar, srv MongoDbServer) {
	// If the following call pancis, it indicates UnimplementedMongoDbServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MongoDb_ServiceDesc, srv)
}

func _MongoDb_SaveOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PokemonSpecies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDbServer).SaveOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDb_SaveOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDbServer).SaveOne(ctx, req.(*model.PokemonSpecies))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoDb_ServiceDesc is the grpc.ServiceDesc for MongoDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MongoDb",
	HandlerType: (*MongoDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOne",
			Handler:    _MongoDb_SaveOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
